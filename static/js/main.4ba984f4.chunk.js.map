{"version":3,"sources":["components/Home/index.js","components/Level1-comments/slideInAlert.js","components/Level1-comments/index.js","components/Level2/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","style","textDecoration","to","Button","variant","color","size","fontSize","Transition","React","forwardRef","props","ref","Slide","direction","AlertDialogSlide","useState","open","setOpen","handleClose","onClick","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Level1","handleChange","event","setState","answer","target","value","validate","preventDefault","state","history","push","alert","textAlign","marginBottom","marginLeft","maxWidth","onSubmit","this","noValidate","autoComplete","TextField","label","onChange","margin","Component","withRouter","Level2","App","Container","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ba984f4.chunk.js","sourcesContent":["\nimport React from 'react'\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom'\nimport Center from 'react-center';\n\nexport default function Home() {\n    return (\n        <div>\n            <Center>\n                <p className=\"p-3\"> Hello CSE204 Student! </p>\n            </Center>\n            <Center>\n                <Link style={{ textDecoration: 'none' }} to=\"/level1\">\n                    <Button className=\"getstarted\" variant=\"text\" color=\"primary\" size=\"large\" style={{ fontSize: '40px'}} >\n                        Let's Get Started\n                    </Button>\n                </Link>\n            </Center>\n\n        </div>\n    );\n\n}\n","\n//Source: https://material-ui.com/components/dialogs/\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function AlertDialogSlide() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  \n  return (\n    <div className=\"\">\n      <Button variant=\"contained\" size=\"small\" color=\"primary\" onClick={handleClickOpen}>\n        Hint\n      </Button>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{\"Have you tried the Inspector?\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            Your answer should be in this format: {\"flag{your_answer_here}\"}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Okay Cool\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport './index.css';\nimport AlertDialogSlide from './slideInAlert';\nimport TextField from '@material-ui/core/TextField';\nimport Center from 'react-center';\nimport { withRouter } from 'react-router-dom';\n\nclass Level1 extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            answer: \"\",\n        };\n    }\n\n    handleChange = event => {\n        this.setState({\n            answer: event.target.value,\n        })\n    }\n\n    validate = event => {\n        //flag{this_one_is_quite_easy}\n        event.preventDefault();        \n        if(this.state.answer === \"hi\") {\n            //Reroute to next page\n            this.props.history.push('/level2');\n        }\n        else {\n            alert(\"Not quite the answer\");\n            this.setState({\n                answer: \"\"\n            })\n        }\n\n        \n    }\n\n    render() {\n\n        return(\n            <div>\n                <h3 style={{ textAlign : 'center', marginBottom : '20px', marginLeft : '50px'}}> Level 1 </h3> \n\n                <div className=\"center\">\n\n                    <Container className=\"contain\" maxWidth=\"xl\">\n                        <Center>\n                            < AlertDialogSlide />\n                        </Center>\n                        <Center>\n                            <form onSubmit={this.validate} className=\"form-container mt-2\" noValidate autoComplete=\"off\">\n                                <TextField\n                                    id=\"standard-name\"\n                                    label=\"Answer\"\n                                    className=\"answer\"\n                                    value={this.state.answer}\n                                    onChange={this.handleChange}\n                                    margin=\"normal\"\n                                />\n                            </form>\n                        </Center>\n                    </Container>\n\n                </div>\n            </div>\n\n        );\n        \n    }\n}\n\nexport default withRouter(Level1);\n","\nimport React from 'react'\n\nclass Level2 extends React.Component {\n    render() {\n        return(\n            <div> Hiii </div>\n        );\n    }\n}\n\nexport default Level2;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container} from 'react-bootstrap'\nimport Home from './components/Home'\n\n\nimport Level1 from './components/Level1-comments';\nimport Level2 from './components/Level2';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"body\">\n        <Container className=\"button-container\">\n          <Router basename={process.env.PUBLIC_URL + '/'}>\n            <Switch>\n              <Route exact path={process.env.PUBLIC_URL + '/'}>\n                <Home />\n              </Route>\n              <Route exact path={process.env.PUBLIC_URL + '/level1'}>\n                <Level1 />\n              </Route>\n              <Route exact path={process.env.PUBLIC_URL + '/level2'}>\n                <Level2 />\n              </Route>\n            </Switch>\n    \n          </Router>\n        </Container>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}